<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="Study">
  
<resultMap type="Study" id="resultStudy">
	<id column="STUDY_NO" property="study_no"/>
	<result column="STUDY_NAME" property="study_name"/>
	<result column="STUDY_PLACE" property="study_place"/>
	<result column="STUDY_INFO" property="study_info"/>
	<result column="STUDY_PEOPLE" property="study_people"/>
	<result column="STUDY_DETAILINFO" property="study_detailInfo"/>
	<result column="STUDY_CREATE_DATE" property="study_create_date"/>
	<result column="STUDY_START_DATE" property="study_start_date"/>
	<result column="STUDY_END_DATE" property="study_end_date"/>
	<result column="STUDY_TAG" property="study_tag"/>
	<result column="STUDY_RECRUITMENT_CONDITION" property="study_recruitment_condition"/>
	<result column="AUTH_CODE" property="area_code"/>
	<result column="STUDY_CATEGORY" property="study_category"/>
</resultMap>

<insert id="insertStudy" parameterType="Study" >
	Insert into study values (STUDY_SEQ.nextval, #{study_name}, #{study_place}, #{study_info}, #{study_people} ,TO_CLOB(#{study_detailInfo}), default, #{study_start_date} , #{study_end_date}, #{study_tag}, default, #{area_code},#{study_category})
</insert>

<select id="selectListStudy" resultMap="resultStudy" parameterType="map" >
	select 
		study_no, study_name, study_info, study_people, 
		study_create_date, study_start_date, study_end_date, 
		study_recruitment_condition, study_people, study_category
	from study 
	WHERE study_name LIKE '%' || #{searchInput} || '%'
	<if test="cateCode gt 0 and cateCode lt 65">
	 and bitand(study_category,  #{cateCode}) = #{cateCode}
	</if>
	ORDER BY STUDY_CREATE_DATE DESC
</select>
<select id="selectListMyStudy" resultMap="resultStudy" parameterType="string">
	select * from study
	where study_no in(select study_no from study_participant
	where member_id = #{member_id})
</select>

<select id="selectStudy" statementType="PREPARED" resultMap="resultStudy">
	select * from study where study_no=#{study_no}
</select>

<!-- 스터디 모집 상태 변경 -->
<update id="updateStudyRecruitmentCondition" parameterType="map">
	update study
		set study_recruitment_condition = #{study_recruitment_condition}
		where study_no=#{study_no}
</update>

<!-- selectCategory-->
<select id="selectCategoryList" resultType="StudyCategory">
	select * from study_category
</select>
<!-- selectCategory-->

<!-- 게시글 조회  TODO DB 수정해야함-->
<select id="postList"  resultMap="resultStudy">
  SELECT * FROM study
  <where>
    <if test="selectedValue == 'createdAtDesc'">
      ORDER BY STUDY_CREATE
    </if>
    <if test="selectedValue == 'viewCountDesc'">
      ORDER BY STUDY_NO
    </if>
    <if test="selectedValue == 'likeCountDesc'">
      ORDER BY STUDY_NAME
    </if>
  </where>
</select>
<!-- admin - study -->
<select id="selectListAdmin" resultType="StudyAdmin" parameterType="map">
	select s.study_no, s.study_name, s.study_place, s.study_info 
			, s.study_people, s.study_detailinfo, to_char(s.study_create_date, 'yyyy-mm-dd') study_create_date 
			, to_char(s.study_start_date, 'yyyy-mm-dd') study_start_date, to_char(s.study_end_date, 'yyyy-mm-dd') study_end_date 
			, s.study_tag, s.STUDY_RECRUITMENT_CONDITION, s.AREA_CODE, s.STUDY_CATEGORY, spp.nick_name
    from study s LEFT join (select * from STUDY_PARTICIPANT sp join PROFILE p on sp.MEMBER_ID = p.MEMBER_ID where auth_code = 1) spp on spp.study_no = s.study_no
    where STUDY_NAME LIKE '%'||#{study_keyword}||'%'
    <if test="study_category != 0">
    	and STUDY_CATEGORY = #{study_category} 
    </if>
    <if test="study_condition != 0">
	    <choose>
	    	<when test='study_condition == 1'>
	    		 and SYSDATE between STUDY_CREATE_DATE and STUDY_START_DATE
	    	</when>
	    	<when test='study_condition == 2'>
	    		 and SYSDATE between STUDY_START_DATE and STUDY_END_DATE
	    	</when>
	    	<when test='study_condition == 3'>
	    		 and SYSDATE > STUDY_END_DATE
	    	</when>
	    </choose>
    </if>
    order by study_create_date desc, s.study_no desc
</select>
<select id="selectListAdminCnt" resultType="_int" parameterType="map">
	select count(*) 
    from study
    where STUDY_NAME LIKE '%'||#{study_keyword}||'%'
    <if test="study_category != 0">
    	and STUDY_CATEGORY = #{study_category} 
    </if>
    <if test="study_condition != 0">
	    <choose>
	    	<when test='study_condition == 1'>
	    		 and SYSDATE between STUDY_CREATE_DATE and STUDY_START_DATE
	    	</when>
	    	<when test='study_condition == 2'>
	    		 and SYSDATE between STUDY_START_DATE and STUDY_END_DATE
	    	</when>
	    	<when test='study_condition == 3'>
	    		 and SYSDATE > STUDY_END_DATE
	    	</when>
	    </choose>
    </if>
</select>
<!-- admin - study -->


<!-- StudyComment -->
<insert id="insertStudyComment">
	INSERT INTO STUDY_COMMENT VALUES
		((SELECT NVL(MAX(STUDY_COMMENT_NO)+1, 0) FROM (SELECT STUDY_COMMENT_NO FROM STUDY_COMMENT WHERE STUDY_NO=#{study_no}))
		, #{member_id}, #{study_no},
		#{study_comment}, SYSDATE,(SELECT NVL(MAX(STUDY_COMMENT_ORIGIN)+1, 1) FROM (SELECT STUDY_COMMENT_ORIGIN FROM STUDY_COMMENT WHERE STUDY_NO=#{study_no})),
		0, 0)
</insert>
<update id="updateStudyComment">
	UPDATE STUDY_COMMENT
	SET STUDY_COMMENT=#{study_comment}
		WHERE STUDY_NO=#{study_no} AND MEMBER_ID=#{member_id} AND STUDY_COMMENT_NO=#{study_comment_no}
</update>
<update id="updateMyStudyComment">
	UPDATE STUDY_COMMENT
	SET STUDY_COMMENT=#{study_comment}||' 최근 수정일 - '||to_char(SYSDATE, 'yy/mm/dd')
		WHERE STUDY_NO=#{study_no} AND MEMBER_ID=#{member_id} AND STUDY_COMMENT_NO=#{study_comment_no}
</update>
<delete id="deleteStudyComment" parameterType="map">
	DELETE FROM STUDY_COMMENT WHERE STUDY_NO=#{study_no} AND MEMBER_ID=#{member_id} AND STUDY_COMMENT_NO=#{study_comment_no}
</delete>
<select id="selectStudyComment" parameterType="map" resultType="kh.team2.swith.study.model.vo.StudyComment">
	SELECT * FROM STUDY_COMMENT WHERE STUDY_NO=#{study_no} AND MEMBER_ID=#{member_id} AND STUDY_COMMENT_NO=#{study_comment_no}
</select>

<select id="selectListStudyComment" resultType="map">
	SELECT SC.STUDY_COMMENT_NO, SC.MEMBER_ID, SC.STUDY_NO, SC.STUDY_COMMENT
    , SC.STUDY_COMMENT_DATE, SC.STUDY_COMMENT_ORIGIN, SC.STUDY_COMMENT_LEVEL, SC.STUDY_COMMENT_SEQ, PR.NICK_NAME
    FROM STUDY_COMMENT SC JOIN PROFILE PR ON SC.MEMBER_ID = PR.MEMBER_ID WHERE STUDY_NO=#{study_no}
    ORDER BY STUDY_COMMENT_ORIGIN, STUDY_COMMENT_SEQ, STUDY_COMMENT_LEVEL
</select>
<select id="selectListAllStudyComment" resultType="map">
	SELECT * FROM STUDY_COMMENT
</select>
<select id="selectStudyCommentCount">
	SELECT COUNT(*) FROM STUDY_COMMENT
</select>

<!-- STUDY_COMMENT_FOR_REPLY -->
<select id="selectMinSeq" parameterType="map" resultType="_int">
	<![CDATA[
	SELECT NVL(MIN(STUDY_COMMENT_SEQ), 0) FROM STUDY_COMMENT
		WHERE STUDY_COMMENT_ORIGIN=#{study_comment_origin}
		AND STUDY_COMMENT_SEQ>#{study_comment_seq}
		AND STUDY_COMMENT_LEVEL<=#{study_comment_level}
	]]>
</select>
<select id="selectReplyMaxSeq" parameterType="_int" resultType="_int">
	 SELECT NVL(MAX(STUDY_COMMENT_SEQ),0) + 1 FROM STUDY_COMMENT 
	 	WHERE STUDY_COMMENT_ORIGIN=#{study_comment_origin}
</select>
<update id="updateReplySeq">
	<![CDATA[
		UPDATE STUDY_COMMENT SET STUDY_COMMENT_SEQ=(STUDY_COMMENT_SEQ + 1)
			WHERE STUDY_COMMENT_ORIGIN=#{study_comment_origin} AND STUDY_COMMENT_SEQ>=#{check}
	]]>
</update>
<insert id="insertReplyComment">
	INSERT INTO STUDY_COMMENT VALUES
		((SELECT NVL(MAX(STUDY_COMMENT_NO)+1, 0) FROM (SELECT STUDY_COMMENT_NO FROM STUDY_COMMENT WHERE STUDY_NO=#{study_no}))
		, #{member_id}, #{study_no},
		#{study_comment}, SYSDATE, #{study_comment_origin},
		#{study_comment_level}, #{study_comment_seq})
</insert>
<!-- STUDY_COMMENT report delete button -->
<select id="countCheckStudyAdmin" parameterType="map" resultType="_int">
	SELECT COUNT(*) FROM STUDY_PARTICIPANT WHERE STUDY_NO=#{study_no} AND MEMBER_ID=#{member_id} AND AUTH_CODE=1
</select>
<select id="countCheckStudyPartidipant" parameterType="map" resultType="_int">
	SELECT COUNT(*) FROM STUDY_PARTICIPANT WHERE STUDY_NO=#{study_no} AND MEMBER_ID=#{member_id} AND AUTH_CODE=2
</select>
<!-- StudyParticipant -->
<insert id="insertStudyParticipant" parameterType="StudyParticipant">
	insert into STUDY_PARTICIPANT values(sp_seq.nextval, sysdate, null, null, #{member_id}, #{study_no}, #{auth_code});
</insert>
<insert id="insertStudyCreateParticipant" parameterType="StudyParticipant">
	INSERT INTO STUDY_PARTICIPANT SELECT sp_seq.nextval, sysdate, null, null, #{member_id}, study_no, 1
             FROM(
                SELECT 
                    study_no 
                FROM study
                ORDER BY ROWNUM DESC)
             WHERE ROWNUM = 1
</insert>
<delete id="deleteStudyParticipant" parameterType="_int">
	delete from STUDY_PARTICIPANT where agr_number = #{agr_number}
</delete>
<update id="updateStudyParticipant" parameterType="StudyParticipant">
	UPDATE STUDY_PARTICIPANT
	SET AGR_DATE = #{agr_date}, OUT_DATE = #{out_date}
		WHERE agr_number = #{agr_number}
</update>
<update id="updateStudyParticipantTransfer" parameterType="map">
	UPDATE STUDY_PARTICIPANT
		SET AUTH_CODE  = #{auth_code}
		WHERE agr_number = #{agr_number}
</update>
<select id="selectOneStudyParticipant" parameterType="_int" resultType="StudyParticipant">
	select AGR_NUMBER, REQ_DATE, AGR_DATE, OUT_DATE, sp.MEMBER_ID, STUDY_NO, AUTH_CODE, NICK_NAME, INTRO, PROFILE_IMG_ROUTE
    	from STUDY_PARTICIPANT sp join PROFILE p on sp.MEMBER_ID = p.MEMBER_ID
                                  join profile_img pi on sp.MEMBER_ID = pi.MEMBER_ID
    	where agr_number = #{agr_number} 
</select>
<select id="selectOneStudyParticipantMember" parameterType="map" resultType="StudyParticipant">
	select AGR_NUMBER, REQ_DATE, AGR_DATE, OUT_DATE, sp.MEMBER_ID, STUDY_NO, AUTH_CODE, NICK_NAME, INTRO
    	from STUDY_PARTICIPANT sp join PROFILE p on sp.MEMBER_ID = p.MEMBER_ID
    	where sp.member_id = #{member_id} and sp.study_no = #{study_no}
</select>
<select id="selectStudyParticipantCnt1" parameterType="_int" resultType="_int">
	select count(*)
    	from STUDY_PARTICIPANT 
    	where STUDY_NO = #{study_no} and AUTH_CODE = 2
</select>
<select id="selectStudyParticipantList1" parameterType="_int" resultType="StudyParticipant">
	select AGR_NUMBER, REQ_DATE, AGR_DATE, OUT_DATE, sp.MEMBER_ID, STUDY_NO, AUTH_CODE, NICK_NAME, INTRO, PROFILE_IMG_ROUTE
    	from STUDY_PARTICIPANT sp join PROFILE p on sp.MEMBER_ID = p.MEMBER_ID
                                  join profile_img pi on sp.MEMBER_ID = pi.MEMBER_ID
    	where STUDY_NO = #{study_no} and AUTH_CODE = 2
</select>
<select id="selectStudyParticipantList2" parameterType="string" resultType="StudyParticipant">
	select AGR_NUMBER, REQ_DATE, AGR_DATE, OUT_DATE, sp.MEMBER_ID, STUDY_NO, AUTH_CODE, NICK_NAME, INTRO, PROFILE_IMG_ROUTE
    	from STUDY_PARTICIPANT sp join PROFILE p on sp.MEMBER_ID = p.MEMBER_ID
                                  join profile_img pi on sp.MEMBER_ID = pi.MEMBER_ID
   	 	where sp.MEMBER_ID = #{member_id} 
</select>
<!-- 벌점 번호로 회원 아아디 스터디 카페 명 가져오기 -->
<select id="selectStudyParticipantPenaltyNo" parameterType="_int" resultType="map">
	select sp.member_id, s.study_name
		from STUDY_PARTICIPANT sp join study s on sp.study_no = s.study_no
		where AGR_NUMBER = (select AGR_NUMBER from penalty where penalty_no = #{penalty_no})
</select>
<!-- 참가자 번호로 회원 아아디 스터디 카페 명 가져오기 -->
<select id="selectStudyParticipantAgrNo" parameterType="_int" resultType="map">
	select sp.member_id, s.study_name
		from STUDY_PARTICIPANT sp join study s on sp.study_no = s.study_no
		where AGR_NUMBER = #{agr_number}
</select>

<!-- StudyReserver -->
<insert id="insertStudyReserver" parameterType="StudyReserver">
	insert into STUDY_RESERVER values(#{study_no}, #{member_id}, SYSDATE, #{req_comment});
</insert>
<delete id="deleteStudyReserver" parameterType="map">
	delete from STUDY_RESERVER where study_no = #{study_no} and member_id = #{member_id}
</delete>
<select id="selectOneStudyReserver" parameterType="map" resultType="StudyReserver">
	select sr.STUDY_NO, sr.MEMBER_ID, TO_CHAR(sr.REQ_DATE, 'YYYY-MM-DD HH24:MI:SS') REQ_DATE, sr.REQ_COMMENT, p.NICK_NAME, p.INTRO, pi.PROFILE_IMG_ROUTE
        from (select * from STUDY_RESERVER where MEMBER_ID = #{member_id} and STUDY_NO = #{study_no}) sr 
        join PROFILE p on sr.MEMBER_ID = p.MEMBER_ID 
        left join PROFILE_IMG pi on p.MEMBER_ID = pi.MEMBER_ID
</select>
<select id="selectStudyReserverList1" parameterType="_int" resultType="StudyReserver">
	select sr.STUDY_NO, sr.MEMBER_ID, TO_CHAR(sr.REQ_DATE, 'YYYY-MM-DD HH24:MI:SS') REQ_DATE, sr.REQ_COMMENT, p.NICK_NAME, p.INTRO, pi.PROFILE_IMG_ROUTE
        from (select * from STUDY_RESERVER where STUDY_NO = #{study_no}) sr 
        join PROFILE p on sr.MEMBER_ID = p.MEMBER_ID 
        left join PROFILE_IMG pi on p.MEMBER_ID = pi.MEMBER_ID
</select>
<select id="selectStudyReserverList2" parameterType="string" resultType="StudyReserver">
	select sr.STUDY_NO, sr.MEMBER_ID, TO_CHAR(sr.REQ_DATE, 'YYYY-MM-DD HH24:MI:SS') REQ_DATE, sr.REQ_COMMENT, p.NICK_NAME, p.INTRO, pi.PROFILE_IMG_ROUTE
        from (select * from STUDY_RESERVER where MEMBER_ID = #{member_id}) sr 
        join PROFILE p on sr.MEMBER_ID = p.MEMBER_ID 
        left join PROFILE_IMG pi on p.MEMBER_ID = pi.MEMBER_ID
</select>
</mapper>
